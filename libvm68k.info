This is libvm68k.info, produced by makeinfo version 4.1 from
libvm68k.texi.

INFO-DIR-SECTION Miscellaneous packages
START-INFO-DIR-ENTRY
* Libvm68k: (libvm68k).         M68000 virtual machine library.
END-INFO-DIR-ENTRY

   This file documents the usage and the internals of Libvm68k.

   Copyright 1999-2001 Hypercore Software Design, Ltd.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: libvm68k.info,  Node: Top,  Next: M68000 Architecture Basics,  Prev: (dir),  Up: (dir)

Libvm68k
********

   Libvm68k is an M68000 virtual machine library written in C++.

   This is Revision 1.1 of the Libvm68k Reference Manual, updated Sat,
16 Jun 2001 23:17:03 +0900.  This manual applies to Version 1.0 of
Libvm68k.

* Menu:

* M68000 Architecture Basics::  M68000 architecture in brief.
* Using Libvm68k::              How to use Libvm68k in a program.
* Function Index::              Index for functions.
* Object Index::                Index for objects.
* Type Index::                  Index for types.
* Concept Index::               Index for concepts.

 --- The Detailed Node Listing ---

M68000 Architecture Basics

* Data Size::                   Data size description.

Using Libvm68k

* Basic Types::                 Definitions of Basic Types.
* Bus Unit::                    Interface to memory and devices.
* Processor::                   How is a processor constructed?

Bus Unit

* Bus::                         Bus.
* Bus Unit Errors::             Errors detected by bus unit.
* Bus Target::                  Bus targets.

Processor

* Context::                     Context of execution.
* Processor Class::             Processor core.

Processor Class

* Instructions::                Handling instructions.


File: libvm68k.info,  Node: M68000 Architecture Basics,  Next: Using Libvm68k,  Prev: Top,  Up: Top

M68000 Architecture Basics
**************************

   Before describing internals of Libvm68k, let's review the M68000
architecture.

   Readers who is familiar with this architecture can skip this chapter.

* Menu:

* Data Size::                   Data size description.


File: libvm68k.info,  Node: Data Size,  Prev: M68000 Architecture Basics,  Up: M68000 Architecture Basics

Data Size
=========

   In M68000 architecture, a "byte" is 8-bit long.  A "word" is two
bytes.  A "long word" is two words, or four bytes.


File: libvm68k.info,  Node: Using Libvm68k,  Next: Function Index,  Prev: M68000 Architecture Basics,  Up: Top

Using Libvm68k
**************

   This chapter describes the application program interface of Libvm68k.

   They are declared in the namespace `vm68k'.

* Menu:

* Basic Types::                 Definitions of Basic Types.
* Bus Unit::                    Interface to memory and devices.
* Processor::                   How is a processor constructed?


File: libvm68k.info,  Node: Basic Types,  Next: Bus Unit,  Prev: Using Libvm68k,  Up: Using Libvm68k

Definitions of Basic Types.
===========================

   Libvm68k defines several basic types as typedefs to keep the program
as portable as possible.  These types are defined in the namespace
`vm68k::types' and imported in the namespace `vm68k' in the header
`<vm68k/types.h>'.  Note that there is neither `uint8_type' nor
`sint8_type', since `int' can always hold either 8-bit-long whole
number.

 - Typedef: uint16_type
     This is a most natural integer type on the host architecture that
     can hold an unsigned 16-bit-long whole number.  It can be `int' if
     `int' is longer than 16 bits, or `unsigned int' otherwise.  Note
     that this type is not necessarily 16 bits long.

 - Typedef: uint32_type
     This is a most natural integer type on the host architecture that
     can hold an unsigned 32-bit-long whole number.  It can be `int' if
     `int' is longer than 32 bits, `unsigned int' if `unsigned int' is
     32 bits long, `long' if `long' is longer than 32 bits, or
     `unsigned long' otherwise.  Note that this type is not necessarily
     32 bits long.

 - Typedef: sint16_type
     This is a most natural integer type on the host architecture that
     can hold a signed 16-bit-long whole number.  It can be `int' if
     `int' can hold a -0x8000, or `long' otherwise(1).  Note that this
     type is not necessarily 16 bits long.

 - Typedef: sint32_type
     This is a most natural integer type on the host architecture that
     can hold a signed 32-bit-long whole number.  It can be `int' if
     `int' is at least 32 bits long and can hold a -0x80000000, `long'
     if `long' can hold a -0x80000000, or `long long' if the compiler
     is GCC(2).  If there is no type that can hold -0x80000000 on the
     host architecture, the compilation will fail with an error.  Note
     that this type is not necessarily 32 bits long.

   ---------- Footnotes ----------

   (1) This case must be quite rare these days, but it is permitted by
the language standard.

   (2) This case must also be quite rare these days, but it is
permitted by the language standard.


File: libvm68k.info,  Node: Bus Unit,  Next: Processor,  Prev: Basic Types,  Up: Using Libvm68k

Bus Unit
========

   Bus target is an object that can be mapped in an address space.  The
class `bus_target' is the abstract base class for all memory.

   Libvm68k uses a single address space to access memory and peripheral
devices.

* Menu:

* Bus::                         Bus.
* Bus Unit Errors::             Errors detected by bus unit.
* Bus Target::                  Bus targets.


File: libvm68k.info,  Node: Bus,  Next: Bus Unit Errors,  Prev: Bus Unit,  Up: Bus Unit

Bus
---

 - Class: bus
     This is a class of address spaces for memory.

 - Method on bus: int get_8 (uint32_type ADDRESS, function_code FC)
          const

 - Method on bus: uint16_type get_16 (uint32_type ADDRESS,
          function_code FC) const

 - Method on bus: uint16_type get_16_unchecked (uint32_type ADDRESS,
          function_code FC) const

 - Method on bus: uint32_type get_32 (uint32_type ADDRESS,
          function_code FC) const

 - Method on bus: void put_8 (uint32_type ADDRESS, int VALUE,
          function_code FC)

 - Method on bus: void put_16 (uint32_type ADDRESS, uint16_type VALUE,
          function_code FC)

 - Method on bus: void put_16_unchecked (uint32_type ADDRESS,
          uint16_type VALUE, function_code FC)

 - Method on bus: void put_32 (uint32_type ADDRESS, uint32_type VALUE,
          function_code FC)

 - Enumeration: function_code
     Classifies memory references.  These values are defined:

    `USER_DATA'
          User data reference.  The processor uses this value in the
          user state for reading and writing data.

    `USER_PROGRAM'
          User program reference.  The processor uses this value in the
          user state for reading instructions.

    `SUPER_DATA'
          Supervisor data reference.  The processor uses this value in
          the supervisor state for reading and writing data.

    `SUPER_PROGRAM'
          Supervisor program reference.  The processor uses this value
          in the supervisor state for reading instructions.


File: libvm68k.info,  Node: Bus Unit Errors,  Next: Bus Target,  Prev: Bus,  Up: Bus Unit

Bus Error And Address Error
---------------------------

 - Class: bus_error

 - Class: address_error


File: libvm68k.info,  Node: Bus Target,  Prev: Bus Unit Errors,  Up: Bus Unit

Bus Target
----------

 - Abstract Class: bus_target
     Abstract base class for memory components.

 - Abstract Method on bus_target: int get_8 (uint32_type ADDRESS,
          function_code FC) const
     Reads an 8-bit data from this memory.  The return value is
     unsigned.

 - Abstract Method on bus_target: uint16_type get_16 (uint32_type
          ADDRESS, function_code FC) const
     Reads a 16-bit data from this memory.  ADDRESS must be a multiple
     of 2.  The return value is unsigned.

 - Method on bus_target: uint32_type get_32 (uint32_type ADDRESS,
          function_code FC) const
     Reads a 32-bit data from this memory.  ADDRESS must be a multiple
     of 4.  The return value is unsigned.

     This method is just implemented using two `get_16' calls for
     convenience, but can be overridden by a derived class for a
     slightly better performance.

 - Abstract Method on bus_target: void put_8 (uint32_type ADDRESS, int
          VALUE, function_code FC)
     Writes an 8-bit value to this memory.  VALUE may be signed or
     unsigned.  FC must be one of the data references.

 - Abstract Method on bus_target: void put_16 (uint32_type ADDRESS,
          uint16_type VALUE, function_code FC)
     Writes a 16-bit value to this memory.  ADDRESS must be a multiple
     of 2.  VALUE may be signed or unsigned.  FC must be one of the
     data references.

 - Method on bus_target: void put_32 (uint32_type ADDRESS, uint32_type
          VALUE, function_code FC)
     Writes a 32-bit value to this memory.  ADDRESS must be a multiple
     of 4.  VALUE may be signed or unsigned.  FC must be one of the
     data references.

     This method is just implemented using two `put_16' calls for
     convenience, but can be overridden by a derived class for a
     slightly better performance.


File: libvm68k.info,  Node: Processor,  Prev: Bus Unit,  Up: Using Libvm68k

Processor
=========

   A processor is made of a pair of a context and an execution unit. A
context represents the dynamic state, which is updated by program
execution. An execution unit represents the static setting that is not
changed while program execution.

* Menu:

* Context::                     Context of execution.
* Processor Class::             Processor core.


File: libvm68k.info,  Node: Context,  Next: Processor Class,  Prev: Processor,  Up: Processor

Context
-------

   The state of the processor is stored in a context. Major components
of a context are a set of registers and a reference to an address space.

 - Class: context
     This class represents the dynamic part of a processor.

 - Instance Variable of context: registers regs
     This variable keeps values of the processor registers.

 - Method on context: bool supervisor_state () const
     This method returns true if this context is in the supervisor
     state.

 - Method on context: void set_supervisor_state (bool STATE)
     This method sets the supervisor state to STATE.

 - Method on context: function_code data_fc () const
     This method returns the function code for data.

 - Method on context: function_code program_fc () const
     This method returns the function code for programs.


File: libvm68k.info,  Node: Processor Class,  Prev: Context,  Up: Processor

Processor Class
---------------

   Libvm68k encapsulates non-dynamic aspects of a M68000 processor into
an execution unit.

 - Class: processor
     This class decodes and executes an instruction sequence.  A
     processor does not change its state while normal execution.

 - Method on processor: instruction_type set_instruction (uint16_type
          OP, const instruction_type &I)
     This method sets an instruction for operation word OP to I and
     returns the previous value.

 - Method on processor: void step (context &C) const
     This method executes a single instruction in context C.

 - Method on processor: void run (context &C) const
     This method executes instructions in context C.

* Menu:

* Instructions::                Handling instructions.


File: libvm68k.info,  Node: Instructions,  Prev: Processor Class,  Up: Processor Class

Instructions
............

   An instruction is defined by a function.  This function is called
"instruction handler".


File: libvm68k.info,  Node: Function Index,  Next: Object Index,  Prev: Using Libvm68k,  Up: Top

Function Index
**************

* Menu:

* data_fc on context:                    Context.
* get_16 on bus:                         Bus.
* get_16 on bus_target:                  Bus Target.
* get_16_unchecked on bus:               Bus.
* get_32 on bus:                         Bus.
* get_32 on bus_target:                  Bus Target.
* get_8 on bus:                          Bus.
* get_8 on bus_target:                   Bus Target.
* program_fc on context:                 Context.
* put_16 on bus:                         Bus.
* put_16 on bus_target:                  Bus Target.
* put_16_unchecked on bus:               Bus.
* put_32 on bus:                         Bus.
* put_32 on bus_target:                  Bus Target.
* put_8 on bus:                          Bus.
* put_8 on bus_target:                   Bus Target.
* run on processor:                      Processor Class.
* set_instruction on processor:          Processor Class.
* set_supervisor_state on context:       Context.
* step on processor:                     Processor Class.
* supervisor_state on context:           Context.


File: libvm68k.info,  Node: Object Index,  Next: Type Index,  Prev: Function Index,  Up: Top

Object Index
************

* Menu:

* regs of context:                       Context.
* SUPER_DATA:                            Bus.
* SUPER_PROGRAM:                         Bus.
* USER_DATA:                             Bus.
* USER_PROGRAM:                          Bus.


File: libvm68k.info,  Node: Type Index,  Next: Concept Index,  Prev: Object Index,  Up: Top

Type Index
**********

* Menu:

* <vx68k/types.h>:                       Basic Types.
* address_error:                         Bus Unit Errors.
* bus:                                   Bus.
* bus_error:                             Bus Unit Errors.
* bus_target:                            Bus Target.
* context:                               Context.
* function_code:                         Bus.
* processor:                             Processor Class.
* sint16_type:                           Basic Types.
* sint32_type:                           Basic Types.
* types:                                 Basic Types.
* uint16_type:                           Basic Types.
* uint32_type:                           Basic Types.


File: libvm68k.info,  Node: Concept Index,  Prev: Type Index,  Up: Top

Concept Index
*************

* Menu:

* bus_target:                            Bus Unit.
* coding convention:                     Using Libvm68k.
* context:                               Context.
* instruction handler:                   Instructions.
* processor <1>:                         Processor Class.
* processor:                             Processor.



Tag Table:
Node: Top509
Node: M68000 Architecture Basics1849
Node: Data Size2229
Node: Using Libvm68k2479
Node: Basic Types2945
Ref: Basic Types-Footnote-14950
Ref: Basic Types-Footnote-25045
Node: Bus Unit5145
Node: Bus5633
Node: Bus Unit Errors7248
Node: Bus Target7444
Node: Processor9350
Node: Context9804
Node: Processor Class10720
Node: Instructions11574
Node: Function Index11784
Node: Object Index12985
Node: Type Index13352
Node: Concept Index14173

End Tag Table
