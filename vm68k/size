/* -*- C++ -*- */
/* Virtual M68000 Toolkit
   Copyright (C) 1998-2008 Hypercore Software Design, Ltd.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or (at
   your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   USA.  */

#ifndef _VM68K_SIZE
#define _VM68K_SIZE 1

#include <vm68k/bus>

namespace vx68k_m68k
{
  /* Access methods for byte data.  */
  struct byte_size
  {
    typedef data_fast8_t  data_type;
    typedef udata_fast8_t udata_type;

    static udata_fast16_t size ()
    {
      return 1;
    }

    static udata_fast16_t aligned_size ()
    {
      return 2;
    }

    static data_fast8_t as_signed (udata_fast8_t value)
    {
      if (value > 0x7fU)
        return -((data_fast8_t) (0xffU - value)) - 1;
      else
        return (data_fast8_t) value;
    }

    static udata_fast8_t get_unsigned (const udata32_t &reg)
    {
      return reg & 0xffU;
    }

    static data_fast8_t get (const udata32_t &reg)
    {
      return as_signed (reg & 0xffU);
    }

    static void put (udata32_t &reg, udata_fast8_t value)
    {
      reg = reg & ~0xffU | value & 0xffU;
    }

    static udata_fast8_t get_unsigned (const system_bus *b,
                                       function_code fc, address_t address)
    {
      return b->get8 (fc, address);
    }

    static data_fast8_t get (const system_bus *b,
                             function_code fc, address_t address)
    {
      return as_signed (b->get8 (fc, address));
    }

    static void put (system_bus *b, function_code fc, address_t address,
                     udata_fast8_t value)
    {
      b->put8 (fc, address, value);
    }

    static udata_fast8_t geti_unsigned (const system_bus *b,
                                        function_code fc, address_t address)
    {
      return b->get8 (fc, address | 1U);
    }

    static data_fast8_t geti (const system_bus *b,
                              function_code fc, address_t address)
    {
      return as_signed (b->get8 (fc, address | 1U));
    }

    static const char *suffix ()
    {
      return "b";
    }
  };

  extern const byte_size byte;

  /* Access methods for word data.  */
  struct word_size
  {
    typedef data_fast16_t  data_type;
    typedef udata_fast16_t udata_type;

    static udata_fast16_t size ()
    {
      return 2;
    }

    static udata_fast16_t aligned_size ()
    {
      return 2;
    }

    static data_fast16_t as_signed (udata_fast16_t value)
    {
      if (value > 0x7fffU)
        return -((data_fast16_t) (0xffffU - value)) - 1;
      else
        return (data_fast16_t) value;
    }

    static udata_fast16_t get_unsigned (const udata32_t &reg)
    {
      return reg & 0xffffU;
    }

    static data_fast16_t get (const udata32_t &reg)
    {
      return as_signed (reg & 0xffffU);
    }

    static void put (udata32_t &reg, udata_fast16_t value)
    {
      reg = reg & ~0xffffU | value & 0xffffU;
    }

    static udata_fast16_t get_unsigned (const system_bus *b,
                                        function_code fc, address_t address)
    {
      return b->get16 (fc, address);
    }

    static data_fast16_t get (const system_bus *b,
                              function_code fc, address_t address)
    {
      return as_signed (b->get16 (fc, address));
    }

    static void put (system_bus *b, function_code fc, address_t address,
                     udata_fast16_t value)
    {
      b->put16 (fc, address, value);
    }

    static udata_fast16_t geti_unsigned (const system_bus *b,
                                         function_code fc, address_t address)
    {
      return b->get16 (fc, address);
    }

    static data_fast16_t geti (const system_bus *b,
                               function_code fc, address_t address)
    {
      return as_signed (b->get16 (fc, address));
    }

    static const char *suffix ()
    {
      return "w";
    }
  };

  extern const word_size word;

  /* Access methods for long word data.  */
  struct long_word_size
  {
    typedef data_fast32_t data_type;
    typedef udata_fast32_t udata_type;

    static udata_fast16_t size ()
    {
      return 4;
    }

    static udata_fast32_t aligned_size ()
    {
      return 4;
    }

    static data_fast32_t as_signed (udata_fast32_t value)
    {
      if (value > 0x7fffffffUL)
        return -((data_fast32_t) (0xffffffffUL - value)) - 1;
      else
        return (data_fast32_t) value;
    }

    static udata_fast32_t get_unsigned (const udata32_t &reg)
    {
      return reg;
    }

    static data_fast32_t get (const udata32_t &reg)
    {
      return as_signed (reg);
    }

    static void put (udata32_t &reg, udata_fast32_t value)
    {
      reg = value & 0xffffffffU;
    }

    static udata_fast32_t get_unsigned (const system_bus *b,
                                        function_code fc, address_t address)
    {
      return b->get32 (fc, address);
    }

    static data_fast32_t get (const system_bus *b,
                              function_code fc, address_t address);
    {
      return as_signed (b->get32 (fc, address));
    }

    static void put (system_bus *b, function_code fc, address_t address,
                     udata_fast32_t value);
    {
      b->put32 (fc, address, value);
    }

    static udata_fast32_t geti_unsigned (const system_bus *b,
                                         function_code fc, address_t address)
    {
      return b->get32 (fc, address);
    }

    static data_fast32_t geti (const system_bus *b,
                               function_code fc, address_t address)
    {
      return as_signed (b->get32 (fc, address));
    }

    static const char *suffix ()
    {
      return "l";
    }
  };

  extern const long_word_size long_word;
}

#endif
